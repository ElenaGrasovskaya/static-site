@use 'sass:map';
@use 'sass:list';

@use 'grid';
@use 'color';
@use 'function';
@use 'breakpoint';

// Keys declaration must be in strict order:
//  => property name | duration | easing function | delay
//
// Taken from [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/transition).
$_transition-default: (
  'property': all,
  'duration': 0.3s,
  'timing-function': ease-in-out,
  'delay': 0s,
);

/// Make equally rounded element.
@mixin rounded($size, $max-size: 60px, $radius: 50%) {
  padding: calc(min(#{$size}, #{$max-size}) / 4);
  border-radius: $radius;
  width: min(#{$size}, #{$max-size});
  min-width: min(#{$size}, #{$max-size});
  height: min(#{$size}, #{$max-size});

  @content;
}

/// Add transition rule for element.
/// Mixin can have not rules at all. In
/// that case default one will be used.
/// @example
///   @include smooth(); // -> transition: all .3s ease-in-out 0s;
///
/// Rules must be declared as list of maps, where
/// one list is responsible for one property.
/// @example
///   @include smooth((duration: .4s)); // -> transition: all .4s ease-in-out 0s;
///   @include smooth(
///     (property: width, duration: .4s),
///     (property: transform)
///   ); // -> transition: width .4s ease-in-out 0s, transform .3s ease-in-out 0s;
@mixin smooth($transitions...) {
  $transition: null;

  @each $map in $transitions {
    $property-transition: function.toString(map.merge($_transition-default, $map));

    $transition: if(
        $transition,
          (#{$transition}, #{$property-transition}),
        $property-transition
    );
  }

  transition: if(
      $transition == null,
      function.toString($_transition-default),
      $transition
  );
}

/// Adds border to an element.
/// Allows to configure $size and $color of border.
@mixin outlined($color: color.$space-cadet, $width: 1.25px) {
  border: $width solid $color;
}

/// Makes text small with all capitalized letters.
@mixin small-caps-text($spacing: 0px) {
  text-transform: uppercase;
  letter-spacing: $spacing;

  @include grid.dimension($property: font-size, $units: 0.7, $min: 12px);
}

/// Adds blue rectangle to element's background.
@mixin blue-rectangle($spacing: 0px, $height: 50%) {
  position: relative;
  display: inline-block;

  &::after {
    content: '';
    display: block;
    position: absolute;
    bottom: 0;
    left: calc(-5% - #{$spacing} / 2);
    width: 110%;
    height: $height;
    background: color.$medium-blue;
    z-index: -1;

    @include smooth();
  }
}