@use 'sass:meta';

/// Initializes grid on site.
/// And defines dynamic _unit_ value.
/// Should be invoked at the root of a module.
///
/// By default grid has 64 columns, which is
/// optimal for design and width as current
/// viewport. The main aim for this is that
/// designer uses only one grid on the whole page.
@mixin init(
  $columns: 64,
  $grid-width: 100vw,
  $min-unit-value: 10px,
  $max-unit-value: 25px
) {
  :root {
    // Unit is dynamic value that changes relative to
    // current viewport. It has lower and upper bounds
    // and equals to size of grid cell with $columns count.
    --unit: max(
      #{$min-unit-value},
      min(#{$grid-width} / #{$columns}, #{$max-unit-value})
    );
  }
}

/// Defines value of the $property in unit measures.
/// You can explicitly provide $units count or
/// define size $from and $to columns or rows.
///
/// If you want to define custom property name
/// or value in units should be passed as argument
/// to CSS function, you can define content block
/// with two variables: unit $value and $property name.
///
/// Note that page has only 64 columns, but rows will be
/// as many as you want. The size of a row and a colums is
/// the same and equal to unit value.
///
/// There is possibility to limit range of value.
/// For this to work out define either $min or $max bounds or both.
@mixin dimension($property, $units: 1, $from: 1, $to: null, $max: null, $min: null) {
  --#{$property}-units-count: #{if($to != null, $to - $from + 1, $units)};

  @if meta.content-exists() {
    @content ($value: _in-range($property, $min, $max), $property: $property);
  } @else {
    #{$property}: _in-range($property, $min, $max);
  }
}

/// Changes the $count of units for some $property.
@mixin units($property, $count) {
  --#{$property}-units-count: #{$count};
}

/// Returns exact value of $property that depends on
/// unit and its count.
@function _exact($property) {
  @return calc(var(--#{$property}-units-count) * var(--unit));
}

/// Allows value of the $property to be resized freely
/// in declared range (from $min to $max). Bounds
/// can be omitted, then range is implicitly implied
/// as infinity and are limited only by unit value.
@function _in-range($property, $min: null, $max: null) {
  @if $min != null and $max != null {
    @return max(#{$min}, min(#{_exact($property)}, #{$max}));
  } @else if $min != null {
    @return max(#{$min}, #{_exact($property)});
  } @else if $max != null {
    @return min(#{_exact($property)}, #{$max});
  } @else {
    @return _exact($property);
  }
}
