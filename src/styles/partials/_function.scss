@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';
@use 'sass:math';

/// Converts $value to string.
/// If it is map, then its values is joined with space as separator.
/// If it is list, then its values is joined with space as separator.
/// Otherwise is used default Sass's `toString` behavior.
///
/// @return unquoted string.
@function toString($value) {
  @if meta.type-of($value) == map {
    @return #{list.join((), map.values($value), $separator: space, $bracketed: false)};
  } @else if meta.type-of($value) == list {
    @return #{list.join((), $value, $separator: space, $bracketed: false)};
  } @else {
    @return #{$value};
  }
}

/// Extracts unit measure from $number.
@function extract-unit($number) {
  @return $number * 0 + 1;
}

/// Extracts number value from unit number.
@function strip-unit($number) {
  @if meta.type-of($number) == 'number' and not math.is-unitless($number) {
    @return $number / extract-unit($number);
  }

  @return $number;
}

@function _single-unit-rem($value, $font-size-base) {
  @if (extract-unit($value) != 1px) {
    @return $value;
  }

  $converted: $value / $font-size-base;

  @return strip-unit($converted) * 1rem;
}

/// Converts ridig pixel-based value to adaptive
/// rem value.
@function px-to-rem($px, $font-size-base: 14px) {
  @if meta.type-of($px) == 'number' {
    @return single-unit-rem($px, $font-size-base);
  } @else {
    @return $px;
  }
}

@function single-unit-em($value, $font-size-base) {
  @if (extract-unit($value) != 1px) {
    @return $value;
  }

  $converted: $value / $font-size-base;

  @return strip-unit($converted) * 1em;
}

/// Converts ridig pixel-based value to adaptive
/// em value.
@function px-to-em($px, $font-size-base: 14px) {
  @if meta.type-of($px) == 'number' {
    @return single-unit-em($px, $font-size-base);
  } @else {
    @return $px;
  }
}

/// Count width for grid inside element.
/// We take inner container's width in columns and
/// element's width in columns, function return element's width in percent.
@function elem-width($elWidth, $allWidth) {
  @return $elWidth * (100 / $allWidth) * 1%;
}

/// Get size of one column in multiplied
/// grid.
@function hl-grid-multiplier($value) {
  @return 100vw / 64 * $value;
}
