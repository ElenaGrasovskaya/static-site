@use '../partials/grid';
@use '../partials/mixin';
@use '../partials/color';
@use '../partials/breakpoint';
@use '../partials/placeholder';

:root {
  --bottom-block-background: linear-gradient(
      0deg,
      #{color.$medium-blue},
      #{color.$medium-blue}
    ),
    linear-gradient(89.8deg, #{color.$medium-blue} 0.16%, #8161fe 99.8%);
}

// We can safely insert styles of bottom section here,
// because PurgeCSS can delete it if HTML will not
// contain according block.
.bottom-section {
  position: relative;

  @include grid.dimension($property: padding-top, $units: 10);
  @include grid.dimension($property: padding-bottom, $units: 11);

  &::before {
    content: '';
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    background: linear-gradient(
        258.52deg,
        #3719ca -132.34%,
        rgba(55, 25, 202, 0) 22.57%
      ),
      linear-gradient(
        283.68deg,
        rgba(235, 174, 149, 0) 45.54%,
        rgba(235, 174, 149, 0.19) 130.68%
      ),
      linear-gradient(3.27deg, #{color.$xiketic} 13.68%, #262147 142.62%);
    box-shadow: 0 50.1359px 100.272px rgba(2, 2, 30, 0.2);
    border-radius: 50%;

    @include grid.dimension($property: top, $units: 6.5);
    @include grid.dimension($property: width, $from: 23, $to: 42, $min: 250px);
    @include grid.dimension($property: height, $from: 23, $to: 42, $min: 250px);
  }

  &::after {
    content: '';
    position: absolute;
    background: linear-gradient(0deg, #{color.$xiketic}, #{color.$xiketic}),
      linear-gradient(
        283.68deg,
        rgba(235, 174, 149, 0) 45.54%,
        rgba(235, 174, 149, 0.19) 130.68%
      ),
      linear-gradient(3.27deg, #{color.$xiketic} 13.68%, #262147 142.62%);
    opacity: 0.6;
    left: 50%;
    z-index: -1;
    border-radius: 50%;
    transform: translateX(-35%);
    filter: blur(20px);

    @include grid.dimension($property: width, $from: 28, $to: 43, $min: 190px);
    @include grid.dimension($property: height, $from: 28, $to: 43, $min: 190px);
    @include grid.dimension($property: top, $units: 14);
  }

  .bottom-title {
    margin-top: 0;
    position: relative;

    @include grid.units($property: margin-bottom, $count: 3);

    &::before,
    &::after {
      content: '';
      display: block;
      position: absolute;
      border-radius: 50%;
    }

    &::before {
      background: linear-gradient(156.8deg, #{color.$white} 15%, #79b0e8 75.42%);
      transform: matrix(-1, 0, 0, 1, 0, 0);

      @include grid.dimension($property: width, $units: 3);
      @include grid.dimension($property: height, $units: 3);
      @include grid.dimension($property: top, $units: -4);
      @include grid.dimension($property: right, $units: 1);

      @include breakpoint.from(medium) {
        @include grid.units($property: right, $from: 56, $to: 62);
      }
    }

    &::after {
      background: color.$alice-blue;

      @include grid.dimension($property: width, $units: 1);
      @include grid.dimension($property: height, $units: 1);
      @include grid.dimension($property: bottom, $units: -5);
      @include grid.dimension($property: left, $units: 1);

      @include breakpoint.from(medium) {
        @include grid.units($property: left, $from: 1, $to: 10);
      }
    }

    .white-text {
      color: color.$white;
    }
  }

  .bottom-link-wrapper {
    margin: 0;
    text-align: center;
  }

  .bottom-contact {
    --letter-spacing: #{grid.value($units: 0.5)};

    z-index: 2;
    color: color.$white;

    @include mixin.small-caps-text(var(--letter-spacing));
    @include mixin.blue-rectangle(var(--letter-spacing));

    &:hover {
      &::after {
        height: 100%;
      }
    }
  }
}

// This rule needs to be here, because it is used together with
// bottom block. So, we group it.
.footer-colored + .main-footer {
  background: var(--bottom-block-background);
  mix-blend-mode: screen;

  .socials a {
    // White color with opacity.
    // TODO: maybe it should be changed?
    // Need a designer's look.
    border-color: hsla(0, 0%, 100%, 0.25);
  }
}

.main-footer {
  @include grid.dimension($property: padding-bottom, $units: 2.5);

  .socials {
    display: flex;
    align-items: center;
    justify-content: center;

    a {
      fill: color.$white;
      display: flex;
      justify-content: center;
      border-radius: 100%;

      @extend %hide-text;
      @include mixin.smooth();
      @include mixin.outlined($width: 1px);
      @include grid.dimension($property: width, $units: 3, $min: 40px);
      @include grid.dimension($property: height, $units: 3, $min: 40px);

      &:not(:last-of-type) {
        @include grid.dimension($property: margin-right, $units: 1.5);
      }

      &:hover {
        background: color.$white;
        fill: color.$medium-blue;
      }

      svg {
        height: 50%;
        width: 50%;
      }
    }
  }

  .with-love-title {
    text-align: center;
    font-weight: 300;

    &-brand {
      position: relative;
      font-weight: 700;

      &::after {
        content: url('star.png');
        position: absolute;
        display: block;
        // TODO: change to grid dimensions.
        width: 9px;
        height: 9px;
        right: -0.7em;
        top: -0.9em;
      }
    }
  }

  @include breakpoint.from(medium) {
    .bottom-line {
      display: flex;
      flex-direction: row-reverse;
      align-items: center;

      > * {
        flex: 1;
      }
    }
  }
}
