// Setup dotenv package and load environment variables from .env file.
require('dotenv').config();

const path = require('path');
const htmlmin = require('html-minifier');
const sitemap = require('@quasibit/eleventy-plugin-sitemap');

const workboxPlugin = require('./.eleventy/plugins/workbox');
const generateIcons = require('./.eleventy/transforms/icons');
const compileStyles = require('./.eleventy/transforms/styles');
const compileScripts = require('./.eleventy/transforms/scripts');
const getImageShortcode = require('./.eleventy/shortcodes/image');
const compressWithBrotli = require('./.eleventy/transforms/brotli');
const {
  DATA_DIRECTORY,
  FONTS_DIRECTORY,
  AUDIO_DIRECTORY,
  VIDEO_DIRECTORY,
  BUILD_DIRECTORY,
  ASSETS_DIRECTORY,
  STYLES_DIRECTORY,
  SOURCE_DIRECTORY,
  SCRIPTS_DIRECTORY,
  LAYOUTS_DIRECTORY,
  COMPONENTS_DIRECTORY,
} = require('./.eleventy/constants');

module.exports = (config) => {
  config.addShortcode('image', getImageShortcode);

  // Добавляем плагин для генерации sitemap в выходной папке. Обязательно указываем hostname для генерации правильных url в файле sitemap.html
  config.addPlugin(sitemap, {
    sitemap: {
      hostname: process.env.HOST,
    },
  });
  // Add generating service worker based on generated by Eleventy HTML files.
  config.addPlugin(workboxPlugin, { buildDirectory: BUILD_DIRECTORY });

  // Process styles that are used in HTML.
  config.addTransform('styles', async (content, outputPath) => {
    if (outputPath.endsWith('html')) {
      return compileStyles(content);
    }

    return content;
  });

  // Process scripts that are used in HMTL.
  config.addTransform('scripts', async (content, outputPath) => {
    if (outputPath.endsWith('html')) {
      return compileScripts(content);
    }

    return content;
  });

  // Generate icons for all devices.
  config.addTransform('icons', async (content, outputPath) => {
    if (outputPath.endsWith('html')) {
      return generateIcons(content);
    }

    return content;
  });

  // Minify HTML.
  config.addTransform('htmlmin', (content, outputPath) => {
    if (outputPath.endsWith('.html')) {
      return htmlmin.minify(content, {
        removeComments: true,
        useShortDoctype: true,
        collapseWhitespace: true,
      });
    }

    return content;
  });

  // Compress HTML using brotli algorithm.
  config.addTransform('compress-html', async (content, outputPath) => {
    if (outputPath.endsWith('html')) {
      return compressWithBrotli(content, outputPath);
    }

    return content;
  });

  // Warning: do not set any transform function after this!!!

  // Добавляем 100мс задержки при работе 11ty-watch, нужно что-бы при частых обновлениях кода не выбило call-stack-count ошибку
  config.setWatchThrottleWaitTime(500);

  config.addPassthroughCopy({
    [path.join(
      SOURCE_DIRECTORY,
      ASSETS_DIRECTORY,
      FONTS_DIRECTORY,
    )]: FONTS_DIRECTORY,
  }); // Fonts - папка с шрийтами используемыми для разработки
  config.addPassthroughCopy({
    [path.join(
      SOURCE_DIRECTORY,
      ASSETS_DIRECTORY,
      VIDEO_DIRECTORY,
    )]: VIDEO_DIRECTORY,
  }); // Video - папка с видео используемыми для разработки
  config.addPassthroughCopy({
    [path.join(
      SOURCE_DIRECTORY,
      ASSETS_DIRECTORY,
      AUDIO_DIRECTORY,
    )]: AUDIO_DIRECTORY,
  });

  // Определяем папки [pages / includes / layouts / data / scss / js] для 11ty-watch наблюдения
  config.addWatchTarget(path.join(SOURCE_DIRECTORY, STYLES_DIRECTORY));
  config.addWatchTarget(path.join(SOURCE_DIRECTORY, SCRIPTS_DIRECTORY));
  config.addWatchTarget(path.join(SOURCE_DIRECTORY, ASSETS_DIRECTORY));

  return {
    dir: {
      data: DATA_DIRECTORY, // Папка подключаемых в разработке json файлов с данными
      input: SOURCE_DIRECTORY, // Папка входного каталога
      output: BUILD_DIRECTORY, // Папка выходного каталога
      layouts: LAYOUTS_DIRECTORY, // Папка подключаемых в разработке теплейтов
      includes: COMPONENTS_DIRECTORY, // Папка подключаемых в разработке компонентов
    },
  };
};
